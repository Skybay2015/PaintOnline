{"version":3,"sources":["store/canvasState.js","store/toolState.js","tools/Tool.js","tools/Brush.js","Components/Modal/index.js","Components/Modal/Modal.js","store/appState.js","tools/Rect.js","tools/Circle.js","tools/Line.js","tools/Eraser.js","Components/Canvas/index.js","Components/Canvas/Canvas.js","Components/SettingsBar/index.js","Components/SettingsBar/SettingsBar.js","Components/ToolBar/index.js","Components/ToolBar/ToolBar.js","App.js","index.js"],"names":["canvas","undoList","redoList","username","makeAutoObservable","this","data","push","socket","sessionId","ctx","getContext","length","dataUrl","pop","toDataURL","send","JSON","stringify","method","id","url","clearRect","width","height","tool","mainColor","strokeColor","lineWidth","color","fillColor","stokeColor","Tool","destroyEvents","fillStyle","strokeStyle","onmousemove","onmousedown","onmouseup","Brush","listen","mouseMoveHandler","bind","mouseDownHandler","mouseUpHandler","e","mouseDown","figure","type","beginPath","moveTo","pageX","target","offsetLeft","pageY","offsetTop","x","y","lineTo","stroke","Modal","modal","usernameRef","connectionHandler","show","Header","Title","Body","ref","Footer","Button","variant","onClick","Rect","startX","startY","saved","currentX","currentY","draw","w","h","img","Image","src","onload","drawImage","rect","fill","Circle","r","Math","sqrt","arc","PI","Line","Eraser","Canvas","observer","useParams","canvasRef","useRef","useState","setModal","useEffect","canvasState","setCanvas","current","axios","get","then","respose","WebSocket","appState","setSocket","setSessionId","toolState","setTool","onopen","onmessage","event","message","parse","console","log","pictureHandler","drawHandler","returnMainSettings","setFillColor","setStrokeColor","setLineWidth","msg","staticDraw","className","setUsername","value","onMouseDown","pushToUndo","onMouseUp","post","SettingsBar","htmlFor","onChange","style","margin","defaultValue","min","max","ToolBar","undo","redo","a","document","createElement","href","download","body","appendChild","click","removeChild","App","path","to","Date","toString","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2e83ee05.chunk.js","sourcesContent":["import { makeAutoObservable } from 'mobx';\n\nclass CanvasState {\n   canvas = null;\n   undoList = [];\n   redoList = [];\n   username = '';\n   constructor() {\n      makeAutoObservable(this);\n   }\n\n   setUsername(username) {\n      this.username = username;\n   }\n\n   setCanvas(canvas) {\n      this.canvas = canvas;\n   }\n\n   pushToUndo(data) {\n      this.undoList.push(data);\n   }\n\n   pushToRedo(data) {\n      this.redoList.push(data);\n   }\n\n   undo(socket, sessionId) {\n      let ctx = this.canvas.getContext('2d');\n      if (this.undoList.length > 0) {\n         let dataUrl = this.undoList.pop();\n         this.redoList.push(this.canvas.toDataURL());\n\n         socket.send(\n            JSON.stringify({\n               method: 'picture',\n               id: sessionId,\n               data: {\n                  url: dataUrl,\n               },\n            }),\n         );\n      } else {\n         ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      }\n   }\n\n   redo(socket, sessionId) {\n      if (this.redoList.length > 0) {\n         let dataUrl = this.redoList.pop();\n         this.undoList.push(this.canvas.toDataURL());\n         socket.send(\n            JSON.stringify({\n               method: 'picture',\n               id: sessionId,\n               data: {\n                  url: dataUrl,\n               },\n            }),\n         );\n      }\n   }\n}\n\nexport default new CanvasState();\n","import { makeAutoObservable } from 'mobx';\n\nclass ToolState {\n   tool = null;\n   mainColor = '#000';\n   strokeColor = '#000';\n   lineWidth = 1;\n   constructor() {\n      makeAutoObservable(this);\n   }\n\n   setTool(tool) {\n      this.tool = tool;\n   }\n   setFillColor(color) {\n      this.tool.fillColor = color;\n      this.mainColor = color;\n   }\n   setStrokeColor(color) {\n      this.tool.stokeColor = color;\n      this.strokeColor = color;\n   }\n   setLineWidth(width) {\n      this.tool.lineWidth = width;\n      this.lineWidth = width;\n   }\n}\n\nexport default new ToolState();\n","export default class Tool {\n   constructor(canvas, socket, id) {\n      this.canvas = canvas;\n      this.socket = socket;\n      this.id = id;\n      this.ctx = canvas.getContext('2d');\n      this.destroyEvents();\n   }\n\n   set fillColor(color) {\n      this.ctx.fillStyle = color;\n   }\n\n   set stokeColor(color) {\n      this.ctx.strokeStyle = color;\n   }\n\n   set lineWidth(width) {\n      this.ctx.lineWidth = width;\n   }\n\n   destroyEvents() {\n      this.canvas.onmousemove = null;\n      this.canvas.onmousedown = null;\n      this.canvas.onmouseup = null;\n   }\n}\n","import Tool from './Tool';\n\nexport default class Brush extends Tool {\n   constructor(canvas, socket, id) {\n      super(canvas, socket, id);\n      this.listen();\n   }\n\n   listen() {\n      this.canvas.onmousemove = this.mouseMoveHandler.bind(this);\n      this.canvas.onmousedown = this.mouseDownHandler.bind(this);\n      this.canvas.onmouseup = this.mouseUpHandler.bind(this);\n   }\n\n   mouseUpHandler(e) {\n      this.mouseDown = false;\n      this.socket.send(\n         JSON.stringify({\n            method: 'draw',\n            id: this.id,\n            figure: {\n               type: 'finish',\n            },\n         }),\n      );\n   }\n\n   mouseDownHandler(e) {\n      this.mouseDown = true;\n      this.ctx.beginPath();\n      this.ctx.moveTo(\n         e.pageX - e.target.offsetLeft,\n         e.pageY - e.target.offsetTop,\n      );\n   }\n\n   mouseMoveHandler(e) {\n      if (this.mouseDown) {\n         this.socket.send(\n            JSON.stringify({\n               method: 'draw',\n               id: this.id,\n               figure: {\n                  type: 'brush',\n                  x: e.pageX - e.target.offsetLeft,\n                  y: e.pageY - e.target.offsetTop,\n                  color: this.ctx.fillStyle,\n                  lineWidth: this.ctx.lineWidth,\n               },\n            }),\n         );\n      }\n   }\n\n   static draw(ctx, x, y, color, lineWidth) {\n      ctx.strokeStyle = color;\n      ctx.lineWidth = lineWidth;\n      ctx.lineTo(x, y);\n\n      ctx.stroke();\n   }\n}\n","import Modal from './Modal';\n\nexport default Modal;\n","import React from 'react';\nimport { Modal, Button } from 'react-bootstrap';\n\nconst ModalWindow = ({ modal, usernameRef, connectionHandler }) => {\n   return (\n      <>\n         <Modal show={modal}>\n            <Modal.Header>\n               <Modal.Title>Enter your name</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n               <input ref={usernameRef} type='text' />\n            </Modal.Body>\n            <Modal.Footer>\n               <Button variant='secondary' onClick={connectionHandler}>\n                  Enter\n               </Button>\n            </Modal.Footer>\n         </Modal>\n      </>\n   );\n};\n\nexport default ModalWindow;\n","import { makeAutoObservable } from 'mobx';\n\nclass App {\n   sessionId = null;\n   socket = null;\n   constructor() {\n      makeAutoObservable(this);\n   }\n\n   setSessionId(id) {\n      this.sessionId = id;\n   }\n\n   setSocket(socket) {\n      this.socket = socket;\n   }\n}\n\nexport default new App();\n","import Tool from './Tool';\n\nexport default class Rect extends Tool {\n   constructor(canvas, socket, id) {\n      super(canvas, socket, id);\n      this.listen();\n   }\n\n   listen() {\n      this.canvas.onmousemove = this.mouseMoveHandler.bind(this);\n      this.canvas.onmousedown = this.mouseDownHandler.bind(this);\n      this.canvas.onmouseup = this.mouseUpHandler.bind(this);\n   }\n\n   mouseUpHandler() {\n      this.mouseDown = false;\n      this.socket.send(\n         JSON.stringify({\n            method: 'draw',\n            id: this.id,\n            figure: {\n               type: 'rect',\n               x: this.startX,\n               y: this.startY,\n               width: this.width,\n               height: this.height,\n               color: this.ctx.fillStyle,\n               strokeColor: this.ctx.strokeStyle,\n               lineWidth: this.ctx.lineWidth,\n            },\n         }),\n      );\n   }\n\n   mouseDownHandler(e) {\n      this.mouseDown = true;\n      this.ctx.beginPath();\n\n      this.startX = e.pageX - e.target.offsetLeft;\n      this.startY = e.pageY - e.target.offsetTop;\n      this.saved = this.canvas.toDataURL();\n   }\n\n   mouseMoveHandler(e) {\n      if (this.mouseDown) {\n         let currentX = e.pageX - e.target.offsetLeft;\n         let currentY = e.pageY - e.target.offsetTop;\n         this.width = currentX - this.startX;\n         this.height = currentY - this.startY;\n         this.draw(this.startX, this.startY, this.width, this.height);\n      }\n   }\n\n   draw(x, y, w, h) {\n      const img = new Image();\n      img.src = this.saved;\n      img.onload = () => {\n         this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n         this.ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);\n         this.ctx.beginPath();\n         this.ctx.rect(x, y, w, h);\n         this.ctx.fill();\n         this.ctx.stroke();\n      };\n      this.ctx.rect(x, y, w, h);\n      this.ctx.fill();\n      this.ctx.stroke();\n   }\n\n   static staticDraw(ctx, x, y, w, h, color, strokeColor, lineWidth) {\n      ctx.fillStyle = color;\n      ctx.strokeStyle = strokeColor;\n      ctx.lineWidth = lineWidth;\n      ctx.beginPath();\n      ctx.rect(x, y, w, h);\n      ctx.fill();\n      ctx.stroke();\n   }\n}\n","import Tool from './Tool';\n\nexport default class Circle extends Tool {\n   constructor(canvas, socket, id) {\n      super(canvas, socket, id);\n      this.listen();\n   }\n\n   listen() {\n      this.canvas.onmousemove = this.mouseMoveHandler.bind(this);\n      this.canvas.onmousedown = this.mouseDownHandler.bind(this);\n      this.canvas.onmouseup = this.mouseUpHandler.bind(this);\n   }\n\n   mouseUpHandler(e) {\n      this.mouseDown = false;\n      this.socket.send(\n         JSON.stringify({\n            method: 'draw',\n            id: this.id,\n            figure: {\n               type: 'circle',\n               x: this.startX,\n               y: this.startY,\n               r: this.r,\n               width: this.width,\n               height: this.height,\n               color: this.ctx.fillStyle,\n               strokeColor: this.ctx.strokeStyle,\n               lineWidth: this.ctx.lineWidth,\n            },\n         }),\n      );\n   }\n\n   mouseDownHandler(e) {\n      this.mouseDown = true;\n      this.ctx.beginPath();\n\n      this.startX = e.pageX - e.target.offsetLeft;\n      this.startY = e.pageY - e.target.offsetTop;\n      this.saved = this.canvas.toDataURL();\n   }\n\n   mouseMoveHandler(e) {\n      if (this.mouseDown) {\n         let currentX = e.pageX - e.target.offsetLeft;\n         let currentY = e.pageY - e.target.offsetTop;\n         this.width = currentX - this.startX;\n         this.height = currentY - this.startY;\n\n         this.r = Math.sqrt(this.width ** 2 + this.height ** 2);\n         this.draw(this.startX, this.startY, this.r);\n      }\n   }\n\n   draw(x, y, r) {\n      const img = new Image();\n      img.src = this.saved;\n      img.onload = () => {\n         this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n         this.ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);\n         this.ctx.beginPath();\n         this.ctx.arc(x, y, r, 2 * Math.PI, false);\n         this.ctx.fill();\n         this.ctx.stroke();\n      };\n      this.ctx.arc(x, y, r, 2 * Math.PI, false);\n      this.ctx.fill();\n      this.ctx.stroke();\n   }\n\n   static staticDraw(ctx, x, y, r, color, strokeColor, lineWidth) {\n      ctx.fillStyle = color;\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = strokeColor;\n      ctx.beginPath();\n      ctx.arc(x, y, r, 2 * Math.PI, false);\n      ctx.fill();\n      ctx.stroke();\n   }\n}\n","import Tool from './Tool';\n\nexport default class Line extends Tool {\n   constructor(canvas, socket, id) {\n      super(canvas, socket, id);\n      this.listen();\n   }\n\n   listen() {\n      this.canvas.onmousemove = this.mouseMoveHandler.bind(this);\n      this.canvas.onmousedown = this.mouseDownHandler.bind(this);\n      this.canvas.onmouseup = this.mouseUpHandler.bind(this);\n   }\n\n   mouseDownHandler(e) {\n      this.mouseDown = true;\n      this.currentX = e.pageX - e.target.offsetLeft;\n      this.currentY = e.pageY - e.target.offsetTop;\n      this.ctx.beginPath();\n      this.ctx.moveTo(this.currentX, this.currentY);\n      this.saved = this.canvas.toDataURL();\n   }\n\n   mouseUpHandler(e) {\n      this.mouseDown = false;\n      this.socket.send(\n         JSON.stringify({\n            method: 'draw',\n            id: this.id,\n            figure: {\n               type: 'line',\n               currentX: this.currentX,\n               currentY: this.currentY,\n               x: this.x,\n               y: this.y,\n               color: this.ctx.fillStyle,\n               lineWidth: this.ctx.lineWidth,\n            },\n         }),\n      );\n   }\n\n   mouseMoveHandler(e) {\n      if (this.mouseDown) {\n         this.x = e.pageX - e.target.offsetLeft;\n         this.y = e.pageY - e.target.offsetTop;\n         this.draw(this.x, this.y);\n      }\n   }\n\n   draw(x, y) {\n      const img = new Image();\n      img.src = this.saved;\n      img.onload = () => {\n         this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n         this.ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);\n         this.ctx.beginPath();\n         this.ctx.moveTo(this.currentX, this.currentY);\n         this.ctx.lineTo(x, y);\n         this.ctx.stroke();\n      };\n   }\n\n   static staticDraw(ctx, currentX, currentY, x, y, color, lineWidth) {\n      ctx.strokeStyle = color;\n      ctx.lineWidth = lineWidth;\n      ctx.beginPath();\n      ctx.moveTo(currentX, currentY);\n      ctx.lineTo(x, y);\n      ctx.stroke();\n   }\n}\n","import Brush from './Brush';\n\nexport default class Eraser extends Brush {\n   mouseMoveHandler(e) {\n      if (this.mouseDown) {\n         this.socket.send(\n            JSON.stringify({\n               method: 'draw',\n               id: this.id,\n               figure: {\n                  type: 'eraser',\n                  x: e.pageX - e.target.offsetLeft,\n                  y: e.pageY - e.target.offsetTop,\n                  lineWidth: this.ctx.lineWidth,\n               },\n            }),\n         );\n      }\n   }\n\n   static draw(ctx, x, y, lineWidth) {\n      ctx.strokeStyle = '#fff';\n      ctx.lineWidth = lineWidth;\n      ctx.lineTo(x, y);\n      ctx.stroke();\n   }\n}\n","import Canvas from './Canvas';\n\nexport default Canvas;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport '../../styles/canvas.sass';\nimport canvasState from '../../store/canvasState';\nimport toolState from '../../store/toolState';\nimport Brush from '../../tools/Brush';\nimport Modal from '../Modal';\nimport { useParams } from 'react-router-dom';\nimport appState from '../../store/appState';\nimport Rect from '../../tools/Rect';\nimport Circle from '../../tools/Circle';\nimport Line from '../../tools/Line';\nimport axios from 'axios';\nimport Eraser from '../../tools/Eraser';\n\nconst Canvas = observer(() => {\n   const { id } = useParams();\n   const canvasRef = useRef();\n   const usernameRef = useRef();\n\n   const [modal, setModal] = useState(true);\n\n   useEffect(() => {\n      canvasState.setCanvas(canvasRef.current);\n      const ctx = canvasRef.current.getContext('2d');\n      axios.get(`http://localhost:5000/image?id=${id}`).then((respose) => {\n         const img = new Image();\n         img.src = respose.data;\n         img.onload = () => {\n            ctx.clearRect(\n               0,\n               0,\n               canvasRef.current.width,\n               canvasRef.current.height,\n            );\n            ctx.drawImage(\n               img,\n               0,\n               0,\n               canvasRef.current.width,\n               canvasRef.current.height,\n            );\n         };\n      });\n   }, []);\n\n   useEffect(() => {\n      if (canvasState.username) {\n         const socket = new WebSocket(`ws://localhost:5000/`);\n         appState.setSocket(socket);\n         appState.setSessionId(id);\n         toolState.setTool(new Brush(canvasRef.current, socket, id));\n         socket.onopen = () => {\n            socket.send(\n               JSON.stringify({\n                  id,\n                  username: canvasState.username,\n                  method: 'connection',\n               }),\n            );\n         };\n         socket.onmessage = (event) => {\n            let message = JSON.parse(event.data);\n            switch (message.method) {\n               case 'connection':\n                  console.log(`user ${message.username}`);\n                  break;\n               case 'picture':\n                  pictureHandler(message);\n                  break;\n               case 'draw':\n                  drawHandler(message);\n                  break;\n               default:\n                  return;\n            }\n         };\n      }\n   }, [canvasState.username]);\n\n   const returnMainSettings = (mainColor, strokeColor, lineWidth) => {\n      toolState.setFillColor(mainColor);\n      toolState.setStrokeColor(strokeColor);\n      toolState.setLineWidth(lineWidth);\n   };\n\n   const pictureHandler = (msg) => {\n      const {\n         data: { url: dataUrl },\n      } = msg;\n      const ctx = canvasRef.current.getContext('2d');\n\n      let img = new Image();\n      img.src = dataUrl;\n      img.onload = () => {\n         ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n         ctx.drawImage(\n            img,\n            0,\n            0,\n            canvasRef.current.width,\n            canvasRef.current.height,\n         );\n      };\n   };\n\n   const drawHandler = (msg) => {\n      const figure = msg.figure;\n      const ctx = canvasRef.current.getContext('2d');\n      const mainColor = toolState.mainColor;\n      const strokeColor = toolState.strokeColor;\n      const lineWidth = toolState.lineWidth;\n\n      switch (figure.type) {\n         case 'brush':\n            Brush.draw(ctx, figure.x, figure.y, figure.color, figure.lineWidth);\n            break;\n\n         case 'rect':\n            Rect.staticDraw(\n               ctx,\n               figure.x,\n               figure.y,\n               figure.width,\n               figure.height,\n               figure.color,\n               figure.strokeColor,\n               figure.lineWidth,\n            );\n            returnMainSettings(mainColor, strokeColor, lineWidth);\n            ctx.beginPath();\n\n            break;\n\n         case 'circle':\n            Circle.staticDraw(\n               ctx,\n               figure.x,\n               figure.y,\n               figure.r,\n               figure.color,\n               figure.strokeColor,\n               figure.lineWidth,\n            );\n            returnMainSettings(mainColor, strokeColor, lineWidth);\n            ctx.beginPath();\n            break;\n         case 'eraser':\n            Eraser.draw(ctx, figure.x, figure.y, figure.lineWidth);\n            break;\n         case 'line':\n            Line.staticDraw(\n               ctx,\n               figure.currentX,\n               figure.currentY,\n               figure.x,\n               figure.y,\n               figure.color,\n               figure.lineWidth,\n            );\n            returnMainSettings(mainColor, strokeColor, lineWidth);\n            ctx.beginPath();\n            break;\n         case 'finish':\n            ctx.beginPath();\n            returnMainSettings(mainColor, strokeColor, lineWidth);\n            break;\n         default:\n            return;\n      }\n   };\n\n   const mouseDownHandler = () => {\n      canvasState.pushToUndo(canvasRef.current.toDataURL());\n   };\n\n   const mouseUpHandler = () => {\n      axios.post(`http://localhost:5000/image?id=${id}`, {\n         img: canvasRef.current.toDataURL(),\n      });\n   };\n\n   const connectionHandler = () => {\n      canvasState.setUsername(usernameRef.current.value);\n      setModal(false);\n   };\n\n   return (\n      <div className='canvas'>\n         <Modal\n            connectionHandler={connectionHandler}\n            modal={modal}\n            usernameRef={usernameRef}\n         />\n         <canvas\n            onMouseDown={mouseDownHandler}\n            onMouseUp={mouseUpHandler}\n            ref={canvasRef}\n            width={900}\n            height={500}\n         />\n      </div>\n   );\n});\n\nexport default Canvas;\n","import SettingsBar from './SettingsBar';\n\nexport default SettingsBar;\n","import React from 'react';\nimport toolState from '../../store/toolState';\n\nconst SettingsBar = () => {\n   return (\n      <div className='settingsbar'>\n         <label htmlFor='line-width'>Line width</label>\n         <input\n            onChange={(e) => toolState.setLineWidth(e.target.value)}\n            id='line-width'\n            type='number'\n            style={{ margin: '0 16px' }}\n            defaultValue={1}\n            min={1}\n            max={50}\n         />\n\n         <label htmlFor='stroke-color'>Stroke color</label>\n         <input\n            onChange={(e) => toolState.setStrokeColor(e.target.value)}\n            id='stroke-color'\n            type='color'\n            style={{ margin: '0 16px' }}\n            defaultValue={1}\n            min={1}\n            max={50}\n         />\n      </div>\n   );\n};\n\nexport default SettingsBar;\n","import ToolBar from './ToolBar';\n\nexport default ToolBar;\n","import React from 'react';\nimport canvasState from '../../store/canvasState';\nimport toolState from '../../store/toolState';\nimport '../../styles/toolbar.sass';\nimport Brush from '../../tools/Brush';\nimport Circle from '../../tools/Circle';\nimport Rect from '../../tools/Rect';\nimport Line from '../../tools/Line';\nimport Eraser from '../../tools/Eraser';\nimport { observer } from 'mobx-react-lite';\nimport appState from '../../store/appState';\nconst ToolBar = observer(() => {\n   const changeColor = (e) => {\n      toolState.setFillColor(e.target.value);\n      toolState.setStrokeColor(e.target.value);\n   };\n\n   const download = () => {\n      const dataUrl = canvasState.canvas.toDataURL();\n      const a = document.createElement('a');\n      a.href = dataUrl;\n      a.download = 'Picture.jpg';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n   };\n\n   return (\n      <div className='toolbar'>\n         <button\n            className='toolbar__btn brush'\n            onClick={() =>\n               toolState.setTool(\n                  new Brush(\n                     canvasState.canvas,\n                     appState.socket,\n                     appState.sessionId,\n                  ),\n               )\n            }\n         />\n         <button\n            className='toolbar__btn rect'\n            onClick={() =>\n               toolState.setTool(\n                  new Rect(\n                     canvasState.canvas,\n                     appState.socket,\n                     appState.sessionId,\n                  ),\n               )\n            }\n         />\n         <button\n            className='toolbar__btn circle'\n            onClick={() =>\n               toolState.setTool(\n                  new Circle(\n                     canvasState.canvas,\n                     appState.socket,\n                     appState.sessionId,\n                  ),\n               )\n            }\n         />\n         <button\n            className='toolbar__btn eraser'\n            onClick={() =>\n               toolState.setTool(\n                  new Eraser(\n                     canvasState.canvas,\n                     appState.socket,\n                     appState.sessionId,\n                  ),\n               )\n            }\n         />\n         <button\n            className='toolbar__btn line'\n            onClick={() =>\n               toolState.setTool(\n                  new Line(\n                     canvasState.canvas,\n                     appState.socket,\n                     appState.sessionId,\n                  ),\n               )\n            }\n         />\n         <input onChange={changeColor} type='color' />\n         <button\n            className='toolbar__btn undo'\n            onClick={() =>\n               canvasState.undo(appState.socket, appState.sessionId)\n            }\n         />\n         <button\n            className='toolbar__btn redo'\n            onClick={() =>\n               canvasState.redo(appState.socket, appState.sessionId)\n            }\n         />\n         <button className='toolbar__btn save' onClick={download} />\n      </div>\n   );\n});\n\nexport default ToolBar;\n","import Canvas from './Components/Canvas';\nimport SettingsBar from './Components/SettingsBar';\nimport ToolBar from './Components/ToolBar';\nimport {\n   BrowserRouter as Router,\n   Switch,\n   Route,\n   Redirect,\n} from 'react-router-dom';\nimport './styles/app.sass';\n\nfunction App() {\n   return (\n      <Router>\n         <div className='app'>\n            <Switch>\n               <Route path='/:id'>\n                  <ToolBar />\n                  <SettingsBar />\n                  <Canvas />\n               </Route>\n               <Redirect to={`f${(+new Date()).toString(16)}`} />\n            </Switch>\n         </div>\n      </Router>\n   );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}